// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AttachmentsBody match snapshot 1`] = `
<ModuleProvider>
  <Provider
    context={
      Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_currentRenderer": Object {},
        "_currentRenderer2": null,
        "_currentValue": null,
        "_currentValue2": null,
        "_threadCount": 0,
      }
    }
    store={
      Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(ConnectedRouterWithContext)
      context={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": null,
          "_currentValue2": null,
          "_threadCount": 0,
        }
      }
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ConnectedRouterWithContext
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
        onLocationChanged={[Function]}
      >
        <ConnectedRouter
          context={
            Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": Object {
                "$$typeof": Symbol(react.provider),
                "_context": [Circular],
              },
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            }
          }
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          onLocationChanged={[Function]}
          store={
            Object {
              "@@observable": [Function],
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <AttachmentsBody
              accessRequestId="00000000-0000-0000-0000-000000000000"
            >
              <styled__ModalBody>
                <div
                  className="styled__ModalBody-sc-1ycpsik-1 jhOLIL"
                >
                  <ForwardRef
                    indicatorColor="primary"
                    onChange={[Function]}
                    textColor="primary"
                    value={0}
                  >
                    <ForwardRef
                      classes={
                        Object {
                          "centered": "MuiTabs-centered",
                          "fixed": "MuiTabs-fixed",
                          "flexContainer": "MuiTabs-flexContainer",
                          "flexContainerVertical": "MuiTabs-flexContainerVertical",
                          "indicator": "MuiTabs-indicator",
                          "root": "MuiTabs-root",
                          "scrollButtons": "MuiTabs-scrollButtons",
                          "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                          "scrollable": "MuiTabs-scrollable",
                          "scroller": "MuiTabs-scroller",
                          "vertical": "MuiTabs-vertical",
                        }
                      }
                      indicatorColor="primary"
                      onChange={[Function]}
                      textColor="primary"
                      value={0}
                    >
                      <div
                        className="MuiTabs-root"
                      >
                        <div
                          className="MuiTabs-scroller MuiTabs-fixed"
                          onScroll={[Function]}
                          style={
                            Object {
                              "marginBottom": null,
                              "overflow": "hidden",
                            }
                          }
                        >
                          <div
                            className="MuiTabs-flexContainer"
                            onKeyDown={[Function]}
                            role="tablist"
                          >
                            <ForwardRef
                              fullWidth={false}
                              indicator={false}
                              key=".0"
                              label="Manage"
                              onChange={[Function]}
                              selected={true}
                              textColor="primary"
                              value={0}
                            >
                              <ForwardRef
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "fullWidth": "MuiTab-fullWidth",
                                    "labelIcon": "MuiTab-labelIcon",
                                    "root": "MuiTab-root",
                                    "selected": "Mui-selected",
                                    "textColorInherit": "MuiTab-textColorInherit",
                                    "textColorPrimary": "MuiTab-textColorPrimary",
                                    "textColorSecondary": "MuiTab-textColorSecondary",
                                    "wrapped": "MuiTab-wrapped",
                                    "wrapper": "MuiTab-wrapper",
                                  }
                                }
                                fullWidth={false}
                                indicator={false}
                                label="Manage"
                                onChange={[Function]}
                                selected={true}
                                textColor="primary"
                                value={0}
                              >
                                <ForwardRef
                                  aria-selected={true}
                                  className="MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  role="tab"
                                  tabIndex={0}
                                >
                                  <ForwardRef
                                    aria-selected={true}
                                    className="MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    role="tab"
                                    tabIndex={0}
                                  >
                                    <button
                                      aria-selected={true}
                                      className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      role="tab"
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiTab-wrapper"
                                      >
                                        Manage
                                      </span>
                                      <ForwardRef
                                        center={false}
                                      >
                                        <ForwardRef
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <t
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef>
                                      </ForwardRef>
                                    </button>
                                  </ForwardRef>
                                </ForwardRef>
                              </ForwardRef>
                            </ForwardRef>
                            <ForwardRef
                              fullWidth={false}
                              indicator={false}
                              key=".1"
                              label="Upload"
                              onChange={[Function]}
                              selected={false}
                              textColor="primary"
                              value={1}
                            >
                              <ForwardRef
                                classes={
                                  Object {
                                    "disabled": "Mui-disabled",
                                    "fullWidth": "MuiTab-fullWidth",
                                    "labelIcon": "MuiTab-labelIcon",
                                    "root": "MuiTab-root",
                                    "selected": "Mui-selected",
                                    "textColorInherit": "MuiTab-textColorInherit",
                                    "textColorPrimary": "MuiTab-textColorPrimary",
                                    "textColorSecondary": "MuiTab-textColorSecondary",
                                    "wrapped": "MuiTab-wrapped",
                                    "wrapper": "MuiTab-wrapper",
                                  }
                                }
                                fullWidth={false}
                                indicator={false}
                                label="Upload"
                                onChange={[Function]}
                                selected={false}
                                textColor="primary"
                                value={1}
                              >
                                <ForwardRef
                                  aria-selected={false}
                                  className="MuiTab-root MuiTab-textColorPrimary"
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  role="tab"
                                  tabIndex={-1}
                                >
                                  <ForwardRef
                                    aria-selected={false}
                                    className="MuiTab-root MuiTab-textColorPrimary"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    role="tab"
                                    tabIndex={-1}
                                  >
                                    <button
                                      aria-selected={false}
                                      className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      role="tab"
                                      tabIndex={-1}
                                      type="button"
                                    >
                                      <span
                                        className="MuiTab-wrapper"
                                      >
                                        Upload
                                      </span>
                                      <ForwardRef
                                        center={false}
                                      >
                                        <ForwardRef
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <t
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef>
                                      </ForwardRef>
                                    </button>
                                  </ForwardRef>
                                </ForwardRef>
                              </ForwardRef>
                            </ForwardRef>
                          </div>
                          <ForwardRef
                            className="MuiTabs-indicator"
                            color="primary"
                            orientation="horizontal"
                            style={
                              Object {
                                "left": 0,
                                "width": 0,
                              }
                            }
                          >
                            <ForwardRef
                              className="MuiTabs-indicator"
                              classes={
                                Object {
                                  "colorPrimary": "jss2",
                                  "colorSecondary": "jss3",
                                  "root": "jss1",
                                  "vertical": "jss4",
                                }
                              }
                              color="primary"
                              orientation="horizontal"
                              style={
                                Object {
                                  "left": 0,
                                  "width": 0,
                                }
                              }
                            >
                              <span
                                className="jss1 jss2 MuiTabs-indicator"
                                style={
                                  Object {
                                    "left": 0,
                                    "width": 0,
                                  }
                                }
                              />
                            </ForwardRef>
                          </ForwardRef>
                        </div>
                      </div>
                    </ForwardRef>
                  </ForwardRef>
                  <TabPanel
                    index={0}
                    value={0}
                  >
                    <div
                      aria-controls="tabpanel-0"
                      aria-labelledby="tab-0"
                      hidden={false}
                      id="tabpanel-0"
                      role="tabpanel"
                    >
                      <ForwardRef
                        paddingBottom={3}
                        paddingTop={3}
                      >
                        <div
                          className="MuiBox-root jss5"
                        >
                          <ManageAttachmentsContainer
                            accessRequestId="00000000-0000-0000-0000-000000000000"
                          >
                            <ForwardRef>
                              <ForwardRef
                                classes={
                                  Object {
                                    "dense": "MuiList-dense",
                                    "padding": "MuiList-padding",
                                    "root": "MuiList-root",
                                    "subheader": "MuiList-subheader",
                                  }
                                }
                              >
                                <ul
                                  className="MuiList-root MuiList-padding"
                                />
                              </ForwardRef>
                            </ForwardRef>
                          </ManageAttachmentsContainer>
                        </div>
                      </ForwardRef>
                    </div>
                  </TabPanel>
                  <TabPanel
                    index={1}
                    value={0}
                  >
                    <div
                      aria-controls="tabpanel-1"
                      aria-labelledby="tab-1"
                      hidden={true}
                      id="tabpanel-1"
                      role="tabpanel"
                    />
                  </TabPanel>
                </div>
              </styled__ModalBody>
            </AttachmentsBody>
          </Router>
        </ConnectedRouter>
      </ConnectedRouterWithContext>
    </Connect(ConnectedRouterWithContext)>
  </Provider>
</ModuleProvider>
`;
